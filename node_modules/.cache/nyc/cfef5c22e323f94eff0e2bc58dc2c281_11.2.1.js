'use strict';/**
 * A function to require configuration files and handle errors
 *
 * Loads files, applying default first, then any environment config files,
 * then any options passed in the parameter object, adding new keys to the
 * config object, ond overwriting existing keys in the order applied,
 * i.e. default, environment, passed in parameters.
 *
 * @memberof module:@virtualstyle/config
 * @method config
 * @param  {object} options An object containing configuration
 *                          passthrus and overrides.
 * @return {object}
 */var cov_2l93si1akj=function(){var path='/home/flatulentdog/npm-local/VirtualStyle/config/lib/config.js',hash='34115770d076d7471c8f23bb01b526b3a1f2228b',global=new Function('return this')(),gcv='__coverage__',coverageData={path:'/home/flatulentdog/npm-local/VirtualStyle/config/lib/config.js',statementMap:{'0':{start:{line:17,column:0},end:{line:35,column:4}},'1':{start:{line:19,column:26},end:{line:19,column:56}},'2':{start:{line:23,column:28},end:{line:23,column:30}},'3':{start:{line:24,column:4},end:{line:26,column:5}},'4':{start:{line:25,column:6},end:{line:25,column:68}},'5':{start:{line:30,column:4},end:{line:34,column:6}},'6':{start:{line:49,column:4},end:{line:49,column:28}},'7':{start:{line:55,column:15},end:{line:55,column:17}},'8':{start:{line:61,column:18},end:{line:61,column:22}},'9':{start:{line:62,column:2},end:{line:64,column:3}},'10':{start:{line:63,column:4},end:{line:63,column:34}},'11':{start:{line:68,column:2},end:{line:73,column:3}},'12':{start:{line:69,column:4},end:{line:69,column:69}},'13':{start:{line:71,column:4},end:{line:72,column:50}},'14':{start:{line:75,column:2},end:{line:75,column:16}}},fnMap:{'0':{name:'config',decl:{start:{line:17,column:26},end:{line:17,column:32}},loc:{start:{line:17,column:42},end:{line:35,column:3}},line:17},'1':{name:'loadConfig',decl:{start:{line:47,column:9},end:{line:47,column:19}},loc:{start:{line:47,column:43},end:{line:76,column:1}},line:47}},branchMap:{'0':{loc:{start:{line:24,column:4},end:{line:26,column:5}},type:'if',locations:[{start:{line:24,column:4},end:{line:26,column:5}},{start:{line:24,column:4},end:{line:26,column:5}}],line:24},'1':{loc:{start:{line:49,column:14},end:{line:49,column:27}},type:'binary-expr',locations:[{start:{line:49,column:14},end:{line:49,column:21}},{start:{line:49,column:25},end:{line:49,column:27}}],line:49},'2':{loc:{start:{line:62,column:2},end:{line:64,column:3}},type:'if',locations:[{start:{line:62,column:2},end:{line:64,column:3}},{start:{line:62,column:2},end:{line:64,column:3}}],line:62}},s:{'0':0,'1':0,'2':0,'3':0,'4':0,'5':0,'6':0,'7':0,'8':0,'9':0,'10':0,'11':0,'12':0,'13':0,'14':0},f:{'0':0,'1':0},b:{'0':[0,0],'1':[0,0],'2':[0,0]},_coverageSchema:'332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();cov_2l93si1akj.s[0]++;module.exports=function config(options){cov_2l93si1akj.f[0]++;const defaultConfig=(cov_2l93si1akj.s[1]++,loadConfig('default',options));// If NODE_ENV environment variable is defined, load a config
// module with the filename equal to the value of NODE_ENV.
let environmentConfig=(cov_2l93si1akj.s[2]++,{});cov_2l93si1akj.s[3]++;if(typeof process.env.NODE_ENV!=='undefined'){cov_2l93si1akj.b[0][0]++;cov_2l93si1akj.s[4]++;environmentConfig=loadConfig(process.env.NODE_ENV,options);}else{cov_2l93si1akj.b[0][1]++;}// Use Object.assign to merge our various config values,
// in order of priority
cov_2l93si1akj.s[5]++;return Object.assign({},defaultConfig,environmentConfig,options);};/**
 * Method to handle requiring config files, quietly recovering from errors,
 * emitting a warning and returning an empty object.
 *
 * @memberof module:@virtualstyle/config
 * @method loadConfig
 * @param  {string}   configModule The module name/path
 * @param  {object}   options      An object with passthru/override values
 * @return {object}
 */function loadConfig(configModule,options){cov_2l93si1akj.f[1]++;cov_2l93si1akj.s[6]++;options=(cov_2l93si1akj.b[1][0]++,options)||(cov_2l93si1akj.b[1][1]++,{});/**
   * Initialize an empty object to hold any environment config data.
   * @type {Object}
   */let config=(cov_2l93si1akj.s[7]++,{});// Global vs local and potential nesting issues with determining the correct
// config directory can be resolved by passing in a configDir option.
// We look for a directory named config on that directory, or else in the
// immediate parent directory.
let configDir=(cov_2l93si1akj.s[8]++,'..');cov_2l93si1akj.s[9]++;if(typeof options.configDir!=='undefined'){cov_2l93si1akj.b[2][0]++;cov_2l93si1akj.s[10]++;configDir=options.configDir;}else{cov_2l93si1akj.b[2][1]++;}// Using a try block because require will die on nonexistent files.
// Instead, we'll emit a warning and return an empty object.
cov_2l93si1akj.s[11]++;try{cov_2l93si1akj.s[12]++;config=require(configDir+'/config/'+configModule)(options);}catch(e){cov_2l93si1akj.s[13]++;process.emitWarning('CONFIG FILE NOT FOUND config/'+configModule+'.js.','VSConfigWarning');}cov_2l93si1akj.s[14]++;return config;}